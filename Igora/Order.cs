//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Igora
{
    using Bytescout.BarCode;
    using Igora.Properties;
    using System;
    using System.Collections.Generic;
    
    public partial class Order
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Order()
        {
            this.Services = new HashSet<Service>();
        }
    
        public int Id { get; set; }
        public System.DateTime CreateDate { get; set; }
        public int ClientId { get; set; }
        public int StatusId { get; set; }
        public Nullable<System.DateTime> DateOfClose { get; set; }
        public int HoursOfRent { get; set; }
        public Nullable<int> StaffId { get; set; }
        public virtual Client Client { get; set; }
        public virtual Staff Staff { get; set; }
        public virtual Status Status { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Service> Services { get; set; }

        private Nullable<decimal> _price;
        public Nullable<decimal> Price
        {
            get
            {
                _price = 0;
                foreach (var i in Services)
                    _price = _price + HoursOfRent * i.PriceInHour;
                return _price;
            }
            set
            {
                decimal? price = 0;
                foreach (var i in Services)
                    price += HoursOfRent * i.PriceInHour;
                _price = price;
            }
        }

        public BarcodeViewModel Barcode { get
            {
                return new BarcodeViewModel()
                {
                    Value = (Id.ToString() + CreateDate.Year.ToString() + CreateDate.Month.ToString() + CreateDate.Day.ToString() + CreateDate.Hour.ToString()
                + CreateDate.Minute.ToString()),
                Symbology=SymbologyType.EAN13
                };
            }
            set 
            {
                Barcode = value;

            }
        }
    }
}
