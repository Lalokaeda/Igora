//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Igora
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Service
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Service()
        {
            this.Orders = new HashSet<Order>();
        }
    
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal PriceInHour { get; set; }
        public Nullable<int> EquipmetId { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Orders { get; set; }
        public virtual Equipment Equipment { get; set; }

        public bool InStock
        {
            get
            {
                if (Equipment == null)
                    return true;
                else
                {
                    if ((Equipment.Qty - Orders.ToList().Where(p=>p.StatusId!=3).Count() < 1))
                        return false;
                    else return true;
                }
            }
        }

        private int? _inStock;
        private int? _outStock;

        public int? InStockInt
        {
            get 
            {
                if (Equipment == null)
                    return null;
                else
                {
                    _inStock = (Equipment.Qty - Orders.Where(p => p.StatusId != 3).Count());
                    return _inStock;
                }
            }
            set
            {
                _inStock= value;
            }
        }

        public int? OutStock
        {
            get
            {
                if (Equipment == null)
                    return null;
                else
                {
                    _outStock = (Equipment.Qty - _inStock);
                    return _outStock;
                }
            }
            set
            {
                _outStock = value;
            }
        }
    }
}
